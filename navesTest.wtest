import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga(velocidad = 0)
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}

	test "propulsar nave" {
	  assert.equals(0, naveVacia.velocidad())
	  naveVacia.propulsar()
	  assert.equals(20000, naveVacia.velocidad())

	  assert.equals(290000, naveLlena.velocidad())
	  naveLlena.propulsar()
	  assert.equals(300000, naveLlena.velocidad())
	}

}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros(velocidad = 0)
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

	test "propulsar nave" {
	  assert.equals(0, naveSinPasajeros.velocidad())
	  naveSinPasajeros.propulsar()
	  assert.equals(20000, naveSinPasajeros.velocidad())

	  assert.equals(290000, naveConPasajeros.velocidad())
	  naveConPasajeros.propulsar()
	  assert.equals(300000, naveConPasajeros.velocidad())
	}

	test "Prepararse para viajar"{
		assert.equals(290000, naveConPasajeros.velocidad())

		naveConPasajeros.prepararseParaViajar()
		assert.equals(300000, naveConPasajeros.velocidad())
	}
}



describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate(velocidad = 0)
	const naveEnAtaque = new NaveDeCombate(velocidad = 0, modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("Â¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}
	test "propulsar nave" {
	  assert.equals(0, naveEnReposo.velocidad())
	  naveEnReposo.propulsar()
	  assert.equals(20000, naveEnReposo.velocidad())

	  assert.equals(0, naveEnAtaque.velocidad())
	  naveEnAtaque.propulsar()
	  assert.equals(20000, naveEnAtaque.velocidad())
	}
	test "Prepararse para viajar"{

	}
}
describe "Nave de carga con residuos radioctivos" {
	const naveCargada = new NaveDeCargaConResiduosRadiactivos(carga = 5000, velocidad = 10000)
	const naveSinCargar = new NaveDeCargaConResiduosRadiactivos(carga = 5000, velocidad = 0)

  test "Ver si la carga sigue siendo la misma " {
	assert.equals(5000, naveCargada.carga())
	assert.equals(10000, naveCargada.velocidad())
	assert.notThat(naveCargada.sellado())
	
	naveCargada.sellarAlVacio()

	assert.that(naveCargada.sellado())

	naveCargada.recibirAmenaza()

	assert.equals(5000, naveCargada.carga())
	assert.equals(0, naveCargada.velocidad())
  }
  test "Preparase para el viaje" {
	naveSin
  }

}